#!/usr/bin/env python3
"""
Setup script for LOTRO Forge data paths.

This script helps users configure their environment variables for the import system.
It validates paths and creates a .env file with the correct configuration.
"""
import os
import sys
from pathlib import Path
from typing import Optional

def find_lotro_companion() -> Optional[Path]:
    """Try to automatically find the lotro_companion directory.
    
    Returns:
        Optional[Path]: Path to lotro_companion if found, None otherwise
    """
    # Common locations to check
    common_paths = [
        Path.home() / 'workspace' / 'lotro' / 'lotro_companion',
        Path.home() / 'projects' / 'lotro' / 'lotro_companion',
        Path.home() / 'lotro' / 'lotro_companion',
        Path('/opt/lotro_data/lotro_companion'),
        Path('/usr/local/lotro/lotro_companion'),
    ]
    
    for path in common_paths:
        if path.exists() and (path / 'lotro-items-db' / 'items.xml').exists():
            return path
    
    return None

def validate_lotro_companion(path: Path) -> tuple[bool, list[str]]:
    """Validate that a lotro_companion directory contains required files.
    
    Args:
        path: Path to lotro_companion directory
        
    Returns:
        tuple[bool, list[str]]: (is_valid, list_of_errors)
    """
    errors = []
    
    if not path.exists():
        errors.append(f"Directory does not exist: {path}")
        return False, errors
    
    required_files = [
        ('lotro-items-db/items.xml', 'items.xml'),
        ('lotro-data/lore/progressions.xml', 'progressions.xml'),
        ('lotro-data/lore/dpsTables.xml', 'dpsTables.xml'),
        ('lotro-icons/items', 'icons directory'),
    ]
    
    for file_path, description in required_files:
        full_path = path / file_path
        if not full_path.exists():
            errors.append(f"Missing {description}: {full_path}")
    
    return len(errors) == 0, errors

def create_env_file(lotro_companion_path: Path, env_file_path: Path) -> None:
    """Create a .env file with the configured paths.
    
    Args:
        lotro_companion_path: Path to lotro_companion directory
        env_file_path: Path where .env file should be created
    """
    # Read the template
    template_path = Path(__file__).parent.parent / 'config' / 'env.template'
    
    if template_path.exists():
        with open(template_path, 'r') as f:
            template_content = f.read()
    else:
        # Fallback template if env.template doesn't exist
        template_content = """# LOTRO Forge Environment Configuration
# Generated by setup_paths.py

# LOTRO COMPANION DATA PATHS
LOTRO_COMPANION_ROOT={lotro_companion_path}

# DATABASE CONFIGURATION
DB_HOST=localhost
DB_PORT=5432
DB_NAME=lotro_forge
DB_USER=your_db_user
DB_PASSWORD=your_db_password

# WEB APPLICATION SETTINGS
LOTRO_FORGE_HOST=127.0.0.1
LOTRO_FORGE_PORT=8000
LOTRO_FORGE_WORKERS=1
LOTRO_FORGE_ENV=development
LOTRO_FORGE_SECRET_KEY=your-secret-key-here-change-in-production
"""
    
    # Replace the placeholder with the actual path
    content = template_content.replace('/path/to/your/lotro_companion', str(lotro_companion_path))
    
    # Write the .env file
    with open(env_file_path, 'w') as f:
        f.write(content)
    
    print(f"‚úÖ Created .env file at: {env_file_path}")

def main():
    """Main setup function."""
    print("üîß LOTRO Forge Data Path Setup")
    print("=" * 50)
    
    # Find project root
    project_root = Path(__file__).parent.parent
    env_file_path = project_root / '.env'
    
    # Check if .env already exists
    if env_file_path.exists():
        print(f"‚ö†Ô∏è  .env file already exists at: {env_file_path}")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    # Try to auto-detect lotro_companion
    print("\nüîç Looking for lotro_companion directory...")
    auto_path = find_lotro_companion()
    
    if auto_path:
        print(f"‚úÖ Found lotro_companion at: {auto_path}")
        is_valid, errors = validate_lotro_companion(auto_path)
        
        if is_valid:
            print("‚úÖ Validation passed!")
            create_env_file(auto_path, env_file_path)
            print("\nüéâ Setup complete!")
            print(f"üìù Please review and edit {env_file_path} if needed.")
            return
        else:
            print("‚ùå Auto-detected path has issues:")
            for error in errors:
                print(f"   - {error}")
    
    # Manual path input
    print("\nüìù Please enter the path to your lotro_companion directory:")
    while True:
        path_input = input("Path: ").strip()
        
        if not path_input:
            print("‚ùå Path cannot be empty. Please try again.")
            continue
        
        path = Path(path_input)
        is_valid, errors = validate_lotro_companion(path)
        
        if is_valid:
            print("‚úÖ Validation passed!")
            create_env_file(path, env_file_path)
            print("\nüéâ Setup complete!")
            print(f"üìù Please review and edit {env_file_path} if needed.")
            return
        else:
            print("‚ùå Invalid path. Issues found:")
            for error in errors:
                print(f"   - {error}")
            print("\nPlease try again or press Ctrl+C to cancel.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        sys.exit(1) 